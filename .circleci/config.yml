version: 2.1

parameters:
  maintainer:
    type: string
    default: support@solarbotics.com

  repo:
    type: string
    default: solarbotics/arduino-cli

  board_manager_arduino:
    type: string
    default: "http://downloads.arduino.cc/packages/package_index.json"

  board_manager_esp8266:
    type: string
    default: "https://arduino.esp8266.com/stable/package_esp8266com_index.json"

  board_manager_esp32:
    type: string
    default: "https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json"

executors:
  python:
    docker:
      - image: circleci/python:3.9
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD

commands:
  initialize:
    parameters:
      version:
        type: string
        default: 20.10.2

    steps:
      - checkout

      - setup_remote_docker:
          version: << parameters.version >>

      - run:
          name: Docker Hub login
          command: |
            if [ -n "$DOCKER_HUB_USERNAME" ]; then
              docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
            else
              echo "Missing Docker Hub credentials"
              exit 1
            fi

      - run:
          name: Install dependencies
          command: |
            pip3 install -r requirements.txt

jobs:
  base:
    executor: python

    steps:
      - initialize

      - run:
         name: Build images
         command: |
           mkdir -p tags
           python3 docker-arduino-cli.py \
            build \
              --username $DOCKER_HUB_USERNAME \
              --password $DOCKER_HUB_PASSWORD \
              -r << pipeline.parameters.repo >> \
              -m << pipeline.parameters.maintainer >> \
            base \
              matrix.json > tags/base.json

      - store_artifacts:
          path: tags/base.json

      - persist_to_workspace:
          root: .
          paths:
            - tags/*

  core:
    executor: python

    parameters:
      index_url:
        type: string
      package:
        type: string
      platform:
        type: string

    steps:
      - initialize

      - attach_workspace:
          at: .

      - run:
         name: Build images
         command: |
           mkdir -p tags
           python3 docker-arduino-cli.py \
            build \
              --username $DOCKER_HUB_USERNAME \
              --password $DOCKER_HUB_PASSWORD \
              -r << pipeline.parameters.repo >> \
              -m << pipeline.parameters.maintainer >> \
            core \
              --index-url << parameters.index_url >> \
              --package << parameters.package >> \
              --platform << parameters.platform >> \
              tags/base.json > tags/<< parameters.package >>-<< parameters.platform >>.json

      - store_artifacts:
          path: tags/<< parameters.package >>-<< parameters.platform >>.json

build-jobs: &build-jobs
  - base:
      context:
        - dockerhub

  - core:
      name: "arduino:avr"
      index_url: << pipeline.parameters.board_manager_arduino >>
      package: arduino
      platform: avr
      requires:
        - base
      context:
        - dockerhub

  - core:
      name: "arduino:sam"
      index_url: << pipeline.parameters.board_manager_arduino >>
      package: arduino
      platform: sam
      requires:
        - base
      context:
        - dockerhub

  - core:
      name: "arduino:samd"
      index_url: << pipeline.parameters.board_manager_arduino >>
      package: arduino
      platform: samd
      requires:
        - base
      context:
        - dockerhub

  - core:
      name: "esp8266:esp8266"
      index_url: << pipeline.parameters.board_manager_esp8266 >>
      package: esp8266
      platform: esp8266
      requires:
        - base
      context:
        - dockerhub

  - core:
      name: "esp32:esp32"
      index_url: << pipeline.parameters.board_manager_esp32 >>
      package: esp32
      platform: esp32
      requires:
        - base
      context:
        - dockerhub

workflows:
  version: 2

  commit:
    jobs: *build-jobs

  nightly:
    jobs: *build-jobs
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
